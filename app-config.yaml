app:
  title: LEDSHUB
  baseUrl: http://localhost:3000
  support:
    url: https://github.com/backstage/backstage/issues
    items:
      - title: Backstage Community
        icon: chat
        links:
          - url: https://backstage.io/docs/overview/support
            title: Support and community
      - title: Backstage News
        icon: docs
        links:
          - url: https://backstage.io/blog/
            title: Backstage Blog

organization:
  name: LEDS

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src:
      - "'self'"
      - 'data:'
      - 'https://backstage.io'
      - 'https://img.shields.io/'
      - 'https://api.dicebear.com/'
      - 'https://kroki.io/'
      - 'https://www.bestpractices.dev/'
      - 'https://api.securityscorecards.dev'
    frame-src:
      - 'https://www.youtube.com'
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  reading:
    allow:
      - host: raw.githubusercontent.com
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DATABASE}
      ssl:
        rejectUnauthorized: false

integrations:
  github:
    - host: github.com
      token:
        $env: GITHUB_TOKEN
    - host: ghe.example.net
      apiBaseUrl: https://ghe.example.net/api/v3
      rawBaseUrl: https://ghe.example.net/raw
      token:
        $env: GHE_TOKEN

proxy:

techdocs:
  builder: 'local'
  generator:
    runIn: 'docker'
  publisher:
    type: 'local'

auth:
  environment: development
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
    google:
      development:
        clientId: ${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityAnnotation

scaffolder:
  templates:
    - ./packages/app/src/templates/service-nodejs/template.yaml

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, User, Group, Template]
  locations:
    - type: url
      target: https://raw.githubusercontent.com/backstage/backstage/master/plugins/scaffolder-backend/sample-templates/bitbucket-demo/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ./service-nodejs/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, group]
  useUrlReadersSearch: true

kubernetes:

permission:
  enabled: true
  rbac:
    admin:
      users:
        - name: user:default/tadeuaugusto  # ðŸ‘ˆ VocÃª como admin
        - name: user:default/LuizRojas
    pluginsWithPermission:
      - catalog
      - scaffolder
      - search
      - techdocs
      - permission
      - rbac
    database:
      client: pg
      connection:
        host: ${POSTGRES_HOST}
        port: ${POSTGRES_PORT}
        user: ${POSTGRES_USER}
        password: ${POSTGRES_PASSWORD}
        database: ${POSTGRES_DATABASE}
        ssl:
          rejectUnauthorized: false
    staticRoles:
      - roleEntityRef: role:default/admin
        description: Administrador geral com permissÃµes completas
        members:
          - user:default/tadeuaugusto
        policies:
          - policy: allow-all

      - roleEntityRef: role:default/editor
        description: Editor com permissÃµes para modificar conteÃºdo
        members:
          - group:default/ia
        policies:
          - policy: allow-catalog-entity-create
          - policy: allow-catalog-entity-update
          - policy: allow-catalog-entity-read

      - roleEntityRef: role:default/viewer
        description: Visualizador com acesso somente leitura
        members:
          - group:default/ia
        policies:
          - policy: allow-catalog-entity-read

rbac:
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DATABASE}
      ssl:
        rejectUnauthorized: false
